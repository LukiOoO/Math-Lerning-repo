class Customer(models.Model):
    MEMBERSHIP_BRONZE = 'B'
    MEMBERSHIP_SILVER = 'S'
    MEMBERSHIP_GOLD = 'G'

    MEMBERSHIP_CHOICES = [
        (MEMBERSHIP_BRONZE, 'Bronze'),
        (MEMBERSHIP_SILVER, 'Silver'),
        (MEMBERSHIP_GOLD, 'Gold'),
    ]
    phone = models.CharField(max_length=255)
    birth_date = models.DateField(null=True, blank=True)
    membership = models.CharField(
        max_length=1, choices=MEMBERSHIP_CHOICES, default=MEMBERSHIP_BRONZE)
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL, on_delete=models.CASCADE)

    def __str__(self):
        return f'{self.user.first_name} {self.user.last_name}'

    @admin.display(ordering='user__first_name')
    def first_name(self):
        return self.user.first_name

    @admin.display(ordering='user__last_name')
    def last_name(self):
        return self.user.last_name

    class Meta:
        ordering = ['user__first_name', 'user__last_name']
        permissions = [
            ('view_history', 'Can view history')
        ]

    def save(self, *args, **kwargs):
        if self.score >= 500:
            self.rank = self.Beginer
        elif self.score >= 250:
            self.rank = self.Advanced
        else:
            self.rank = self.GrandMaster
        super().save(*args, **kwargs)

daskjdaklsjdas====================================

from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager
from django.core.validators import MinValueValidator


class CustomUserManager(BaseUserManager):

    def create_user(self, email, password, **extra_fields):

        if not email:
            raise ValueError(("The Email must be set"))
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save()
        return user

    def create_superuser(self, email, password, **extra_fields):

        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)
        extra_fields.setdefault("is_active", True)

        if extra_fields.get("is_staff") is not True:
            raise ValueError(("Superuser must have is_staff=True."))
        if extra_fields.get("is_superuser") is not True:
            raise ValueError(("Superuser must have is_superuser=True."))
        return self.create_user(email, password, **extra_fields)



Drop database math_learning;
create database math_learning;users_mathsiteuser

    
waitress-serve --listen=*:8000 myapp.wsgi:application



jak poprawnie zabezpieczyć rest api django i połączyć je z react w taki sposób żeby tylko react miał możliwośc pobierania danych z rest api 


https://colorhunt.co/palette/03001c301e675b8fb9b6eada


  const [gif, setGif] = useState({});

  useEffect(() => {
    fetch("http://127.0.0.1:8000/home/")
      .then((response) => response.json())
      .then((data) => setGif(data[0]))
      .catch((error) => console.error(error));
  }, []);


            <div className="div-2bnt">
            <button className="2bnt"></button>
            <button className="2btn"></button>
          </div>



import React, { useState } from "react";
import { useHistory } from "react-router-dom";
import Joi from "joi-browser";

const Register = () => {
  const [schema] = useState({
    nickname: Joi.string().required().email().label("Username"),
    password: Joi.string().required().min(5).label("Password"),
    email: Joi.string().email().required(),
  });
  const validate = () => {
    const options = { abortEarly: false };
    const { error } = Joi.validate(this.state.data, this.schema, options);
    if (!error) return null;

    const errors = {};
    for (let item of error.details) errors[item.path[0]] = item.message;
    return errors;
  };

  const validateProperty = ({ name, value }) => {
    const obj = { [name]: value };
    const schema = { [name]: this.schema[name] };
    const { error } = Joi.validate(obj, schema);
    return error ? error.details[0].message : null;
  };
  const history = useHistory();
  const [user, setUser] = useState({
    nickname: "",
    password: "",
    email: "",
    errors: {},
  });

  const handleChange = (event) => {
    validateProperty(event.target.name);
    setUser({ ...user, [event.target.name]: event.target.value });
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    fetch("http://127.0.0.1:8000/auth/users/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(user),
    })
      .then((res) => {
        if (res.status === 400) {
          const errors = { ...user.errors };
          errors.username = "User already exists";
          setUser({ ...user, errors });
          return;
        }
        res.json();
      })
      .then((data) => {})
      .catch((error) => {
        if (error.response && error.response.status === 400) {
          const errors = { ...user.errors };
          errors.username = error.response.data;
          setUser({ ...user, errors });
        }
      });
  };

  return (
    <form onSubmit={handleSubmit}>
      {user.errors.username && <p>{user.errors.username}</p>}
      <input
        type="text"
        name="nickname"
        value={user.nickname}
        onChange={handleChange}
        placeholder="Nickname"
      />
      <input
        type="email"
        name="email"
        value={user.email}
        onChange={handleChange}
        placeholder="Email"
      />
      <input
        type="password"
        name="password"
        value={user.password}
        onChange={handleChange}
        placeholder="Password"
      />
      <button type="submit">Create User</button>
    </form>
  );
};
export default Register;



.then((res) => {
        if (res.status === 400) {
          setError({ ...error, login: "bad password or username" });
          return;
        } else if (res.status !== 400) {
          history.push("/login");
        }
        res.json();
      })
      .then((data) => {})
      .catch((error) => {
        if (error.response && error.response.status === 400) {
          setError({ ...error, username: error.response.data });
        }
      });
  };



  # class MathTest(viewsets.ReadOnlyModelViewSet):

#     def list(self, request):
#         try:
#             test_list = []

#             d = views.DividingViewSet()
#             a = views.AddingViewSet()
#             s = views.SubtractionViewSet()
#             m = views.MultiplicationViewSet()
#             serializer1 = serializers.MathSerializer(m.list(request).data)
#             serializer2 = serializers.MathSerializer(a.list(request).data)
#             serializer3 = serializers.MathSerializer(s.list(request).data)
#             serializer4 = serializers.MathSerializer(d.list(request).data)
#             for x in range(10):
#                 x = random.randint(0, 3)
#                 if x == 0:
#                     test_list.append(serializer1.data)
#                 elif x == 1:
#                     test_list.append(serializer2.data)
#                 elif x == 2:
#                     test_list.append(serializer3.data)
#                 elif x == 3:
#                     test_list.append(serializer4.data)
#             return Response({'ok': test_list})
#         except test_list.DoesNotExist:
#             raise HttpResponse(status=204)



# class TestResultView(generics.CreateAPIView):
    # serializer_class = MathTestSerializer
    # permission_classes = (IsAuthenticated,)

    # def post(self, request, format=None):

    #     correct = request.data.get('correct', None)
    #     mistakes = request.data.get('mistakes', None)
    #     user_id = request.data.get('user_id', None)

    #     # pobierz obiekt użytkownika z bazy danych
    #     user = get_object_or_404(views.MathsiteUser, pk=user_id)

    #     # zapisz dane o teście w bazie danych
    #     test = models.TestModel.objects.create(
    #         correct=correct,
    #         mistakes=mistakes,
    #         user=user
    #     )

    #     # zwiększ lub zmniejsz score ucznia
    #     score = user.score + (correct - mistakes)
    #     user.score = score
    #     user.save()

    #     # zwróć odpowiedź z potwierdzeniem
    #     return Response({'message': 'Test został zapisany i score użytkownika został zaktualizowany.'}, status=status.HTTP_200_OK)
import { useEffect } from "react";

const RefreshAccessToken = ({ user }) => {
  useEffect(() => {
    if (user) {
      const intervalId = setInterval(() => {
        fetch("http://127.0.0.1:8000/auth/jwt/refresh", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            refresh: localStorage.getItem("jwtRefreshToken"),
          }),
        })
          .then((res) => {
            return res.json();
          })
          .then((data) => {
            localStorage.removeItem("jwtToken");
            localStorage.removeItem("jwtRefreshToken");
            localStorage.setItem("jwtToken", data.access);
            localStorage.setItem("jwtRefreshToken", data.refresh);
          })
          .catch((error) => {});
      }, 30000);

      return () => {
        clearInterval(intervalId);
      };
    }
  }, []);

  return null;
};

export default RefreshAccessToken;


  useEffect(() => {
    setInterval(() => {
      if (localStorage.refresh) {
        fetch("http://127.0.0.1:8000/auth/jwt/refresh", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            refresh: localStorage.getItem("jwtRefreshToken"),
          }),
        })
          .then((res) => {
            return res.json();
          })
          .then((data) => {
            localStorage.setItem("jwtToken", data.access);
            localStorage.setItem("jwtRefreshToken", data.refresh);
          })
          .catch((error) => {});
      }
    }, 30000);
  }, []);


  git push -u origin Finish_etap



  https://coolors.co/palette/f8f9fa-e9ecef-dee2e6-ced4da-adb5bd-6c757d-495057-343a40-212529




  body {
  background-color: #212529;
  color: #adb5bd;
  font-family: Arial, Helvetica, sans-serif;
  margin: 0;
}
.banner {
  display: flex;
  flex-direction: row-reverse;
  background-color: black;
  height: 155px;
}
.banner-left {
  width: 30%;
}
.banner-right {
  width: 70%;
}

.banner h1 {
  text-align: center;
  font-size: 50px;
  padding: 35px;
}
.nav-item {
  display: block;
  line-height: 48px;
  padding: 0 14px;
  text-decoration: none;
  color: #ffffff;
  font-size: 20px;

  display: inline;
  position: relative;
}

.nav-item:hover {
  color: #212529;
  display: inline-block;
  background: #adb5bd;
}

.navbar-main-container {
  text-align: center;
  background: black;
  color: #fff;
  height: 48px;
  padding-left: 18px;
  border-radius: 0px;
}
.h1-home-page,
.h1-ex-page {
  text-align: center;
  color: #f8f9fa;
}
.login-container {
  display: flex;
}

.no-login {
  display: flex;
  padding: 10px;
  flex-wrap: wrap;
  flex-direction: column-reverse;
  align-items: center;
}

.home-page {
  display: flex;
  font-size: large;
  flex-direction: column;
  align-items: center;
}

.strong-home {
  font-size: 40px;
}

.p-home-page {
  margin: 15px;
  display: flex;
}

.best-users-list {
  -webkit-box-shadow: inset 0px 0px 33px -7px rgba(248, 249, 250, 1);
  -moz-box-shadow: inset 0px 0px 33px -7px rgba(248, 249, 250, 1);
  box-shadow: inset 0px 0px 33px -7px rgba(248, 249, 250, 1);
  color: #adb5bd;
  border: 1px solid #f8f9fa;
  width: 40%;
  text-align: center;
  background-color: #6c757d;
}
.best-users-container {
  width: 100%;
  display: flex;
  justify-content: center;
}

.li-users-list {
  margin: 10px;
}
.user-list-container {
  text-align: center;
  width: 100%;
  display: flex;
  justify-content: center;
}
.h1-list {
  border-bottom: 1px solid;
  color: #f8f9fa;
}
.ranks-info {
  margin-bottom: 10px;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.user-data {
  font-weight: bolder;
}

.user-profile {
  background-color: black;
  color: #f8f9fa;
  margin: 5px;
  width: 25%;
  text-align: center;
  display: inline;
}

.footer-element {
  position: sticky;
  margin-top: 10px;
  top: 0;
  background-color: lightgray;
  padding: 10px;
  background-color: #343a40;
  color: #adb5bd;
  text-align: center;
}

